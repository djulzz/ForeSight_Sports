/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/* 
 * File:   Point_2D.hpp
 * Author: Esposito
 *
 * Created on April 3, 2017, 4:13 PM
 */

#ifndef POINT_2D_HPP
#define POINT_2D_HPP

#include <iostream>


////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
    template <typename T>
	class Point_2D {

        public:
			/******************************************************************/
			/******************************************************************/
			friend Point_2D< T > operator-(Point_2D< T >& lhs, Point_2D< T >& rhs)
			{
				T dx = lhs.X() - rhs.X();
				T dy = lhs.Y() - rhs.Y();
				return Point_2D< T >(dx, dy);
			}
			/******************************************************************/
			/******************************************************************/
			friend std::ostream& operator<<(std::ostream& o, Point_2D< T >& rhs)
			{
				return o << "(" << rhs.X() << "," << rhs.Y() << ")";
			}

			/******************************************************************/
			/******************************************************************/
			//Vector_2D< T > operator-(const Point_2D< T >& origin)
			//{
			//	Vector_2D< T > v;
			//	v.m_x = m_x - origin.m_x;
			//	v.m_y = m_y - origin.m_y;
			//	return v;
			//}

			/******************************************************************/
			/******************************************************************/
            Point_2D< T >( T x, T y )
            {
                m_x = x;
                m_y = y;
            }

			/******************************************************************/
			/******************************************************************/
			Point_2D< T >(const Point_2D< T >& rhs )
			{
				if ( this != &rhs) {
					m_x = rhs.m_x;
					m_y = rhs.m_y;
				}
			}

			/******************************************************************/
			/******************************************************************/
			Point_2D< T > operator=(const Point_2D< T >& rhs)
			{
				if ( this != &rhs) {
					m_x = rhs.m_x;
					m_y = rhs.m_y;
				}
				return *this;
			}

			/******************************************************************/
			/******************************************************************/
            Point_2D< T >( void )
            {
                m_x = static_cast< T >( 0 );
                m_y = static_cast< T >( 0 );
            }
            
			/******************************************************************/
			/******************************************************************/
            void SetCoords( T x, T y )
            {
                m_x = x;
                m_y = y;
                return;
            }

			/******************************************************************/
			/******************************************************************/
            virtual ~Point_2D<T>() {}
            
			/******************************************************************/
			/******************************************************************/
            inline T X( void ) const { return m_x; }

			/******************************************************************/
			/******************************************************************/
            inline T Y( void ) const { return m_y; }
            
			/******************************************************************/
			/******************************************************************/
			static void Unit_Test()
			{
				std::cout << "Unit Test Point_2D Class" << std::endl;
				Point_2D< T > p1(1, 2);
				Point_2D< T > p2;
				Point_2D< T > p3(p1);

				Point_2D< T > p4;
				p4.SetCoords(T(3), T(4));

				Point_2D< T > p5 = p4;

				Point_2D< T > p6 = p5 - p4;

				std::cout << "p1 = " << p1 << std::endl;
				std::cout << "p2 = " << p2 << std::endl;
				std::cout << "p3 = " << p3 << std::endl;
				std::cout << "p4 = " << p4 << std::endl;
				std::cout << "p5 = " << p5 << std::endl;
				std::cout << "p6 = " << p6 << std::endl;

				std::cout << "End Unit Test Point_2D Class" << std::endl;
				return;
			}

        protected:
            T m_x;
            T m_y;
    };

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
typedef Point_2D< double > Point_2DD;
typedef Point_2D< float > Point_2DF;


#endif /* POINT_2D_HPP */

