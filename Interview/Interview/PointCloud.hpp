#ifndef POINTCLOUD_HPP
#define POINTCLOUD_HPP

#include "Point_2D.hpp"
#include "Utilities.hpp"
#include <vector>


////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
template <typename T> class PointCloud
{
	public:
		/******************************************************************/
		/******************************************************************/
		PointCloud< T >()
		{
			p_clear();
		}

		/******************************************************************/
		/******************************************************************/
		Point_2D< T > operator[]( const size_t& index )
		{
			return m_pts[index];
		}

		/******************************************************************/
		/******************************************************************/
		friend std::ostream& operator<<(std::ostream& o, PointCloud< T >& rhs)
		{
			size_t n = rhs.NumberOfPoints();
			for (size_t i = 0; i < n; i++) {
				o << rhs.m_pts[i] << std::endl;
			}
			return o;
		}
		/******************************************************************/
		/******************************************************************/
		virtual ~PointCloud()
		{
			p_clear();
		}
		/******************************************************************/
		/******************************************************************/
		void AddPoint(const Point_2D< T >& pt)
		{
			m_pts.push_back(pt);
			m_Xs.push_back(pt.X());
			m_Ys.push_back(pt.Y());
		}

		/******************************************************************/
		/******************************************************************/
		Utilities::value_info_t< T > GetXMin()
		{
			Utilities::value_info_t< T > info = Utilities::findMin< T >(m_Xs);
			return info;
		}

		/******************************************************************/
		/******************************************************************/
		Utilities::value_info_t< T > GetXMax()
		{
			Utilities::value_info_t< T > info = Utilities::findMax< T >(m_Xs);
			return info;
		}

		/******************************************************************/
		/******************************************************************/
		Utilities::value_info_t< T > GetYMin()
		{
			Utilities::value_info_t< T > info = Utilities::findMin< T >(m_Ys);
			return info;
		}

		/******************************************************************/
		/******************************************************************/
		Utilities::value_info_t< T > GetYMax()
		{
			Utilities::value_info_t< T > info = Utilities::findMax< T >(m_Ys);
			return info;
		}

		/******************************************************************/
		/******************************************************************/
		size_t NumberOfPoints(void)
		{
			return m_pts.size();
		}

		/******************************************************************/
		/******************************************************************/

	protected:
		/******************************************************************/
		/******************************************************************/
		void p_clear(void)
		{
			m_pts.clear();
			m_Xs.clear();
			m_Ys.clear();
		}
	protected:
		std::vector< Point_2D< T > > m_pts;
		std::vector< T > m_Xs;
		std::vector< T > m_Ys;

};
#endif // POINTCLOUD_HPP defined
